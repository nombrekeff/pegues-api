datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String   @unique
  password    String   
  firstname   String?
  lastname    String?
  zones       Zone[]   
  routes      Route[]
  ascents     Ascent[]
  sessions    Session[]
  roles       Role[]   
  preferences UserPreferences?
}

model Zone {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String   
  routes    Route[]
  type      String   @default("outdoors")

  @@unique([authorId, id])
}

model Route {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String   
  description String?   
  grade       Grade           @default(uknown)
  discipline  RouteDiscipline @default(other)


  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?   

  zone        Zone?     @relation(fields: [zoneId], references: [id])
  zoneId      String?

  ascents     Ascent[]
  sessions    Session[]
  @@unique([authorId, id])
}

model Ascent {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  route        Route?   @relation(fields: [routeId], references: [id])
  routeId      String

  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?   

  ascentAt    DateTime?
  sessions    Int       @default(0)
  tries       Int       @default(0)
  @@unique([authorId, id])
}

model Session {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  route        Route?   @relation(fields: [routeId], references: [id])
  routeId      String

  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?   

  ascentAt    DateTime?
  ascent      Boolean   @default(false)
  tries       Int       @default(0)
  @@unique([authorId, id])
}

model UserPreferences {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  preferredDiscipline RouteDiscipline @default(lead)

  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?    @unique
  @@unique([authorId, id])
}

enum Role {
  ADMIN
  USER
}

 enum RouteDiscipline {
  lead
  boulder
  trad
  dws
  other
}

enum Grade {
  g3
  g4
  g5

  g6A
  g6AP
  g6B
  g6BP
  g6C
  g6CP

  g7A
  g7AP
  g7B
  g7BP
  g7C
  g7CP

  g8A
  g8AP
  g8B
  g8BP
  g8C
  g8CP

  g9A
  g9AP
  uknown  
}