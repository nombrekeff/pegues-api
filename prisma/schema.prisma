datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String   @unique
  password    String   
  firstname   String?
  lastname    String?
  username    String?

  profileImage    Media? @relation("profileImage")

  zones         Zone[]   
  routes        Route[]
  projects      Project[]
  sessions      Session[]
  roles         Role[]   
  images        Media[] @relation("author")  
  preferences   UserPreferences?

  @@unique([id])
}

model Zone {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   
  description String?   
  type        ZoneType @default(outdoors)
  public      Boolean  @default(false)

  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?   

  routes      Route[]

  @@unique([authorId, id])
}

model Route {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String   
  description String?   
  public      Boolean   @default(false)
  grade       Grade           @default(uknown)
  discipline  RouteDiscipline @default(other)

  images      Media[]
  projects    Project[]

  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?   

  zone        Zone?     @relation(fields: [zoneId], references: [id])
  zoneId      String?

  @@unique([authorId, id])
}

model Project {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  public      Boolean   @default(false)

  route       Route?   @relation(fields: [routeId], references: [id])
  routeId     String?

  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?   

  sessions    Session[]

  @@unique([routeId, id])
}

model Session {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String?
  notes       String[]  
  public      Boolean   @default(false)

  project     Project?  @relation(fields: [projectId], references: [id])
  projectId   String?

  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?   

  ascent_date DateTime?
  start_date  DateTime?
  end_date    DateTime?
  has_ascent  Boolean   @default(false)
  tries       Int       @default(0)

  @@unique([authorId, id])
}

model Media {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  mimetype    String
  filename    String
  path        String
  size        Int

  author      User    @relation(name: "author", fields: [authorId], references: [id])
  authorId    String  

  user        User?    @relation(name: "profileImage", fields: [userId], references: [id])
  userId      String?  @unique

  route       Route?   @relation(fields: [routeId], references: [id])
  routeId     String?

  @@unique([id])
}

model UserPreferences {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  preferredDiscipline RouteDiscipline @default(lead)
  enableVibration     Boolean @default(true)

  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?   @unique
  @@unique([authorId, id])
}

enum Role {
  ADMIN
  USER
}

enum RouteDiscipline {
  lead
  boulder
  trad
  dws
  other
}

enum ZoneType {
  outdoors
  indoors
  ice
  other
}

enum Grade {
  g3
  g4
  g5

  g6A
  g6AP
  g6B
  g6BP
  g6C
  g6CP

  g7A
  g7AP
  g7B
  g7BP
  g7C
  g7CP

  g8A
  g8AP
  g8B
  g8BP
  g8C
  g8CP

  g9A
  g9AP
  g9B
  g9BP
  g9C
  g9CP
  uknown  
}